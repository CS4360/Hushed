package com.example.hushed.crypto;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.util.Base64;
import java.security.NoSuchAlgorithmException;

import org.junit.Assert;
import org.junit.Test;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;


public class CryptoTester {
    @Test
    public void testEncryptDecrypt() {
        String message = "Hi bob";
        byte[] messageBytes = message.getBytes();

        // ---- ENCRYPTION ----
        // Generate random private/public keypairs.
        // Public and private keys would be generated by different devices
        byte[] privateA = Keygen.generatePrivateKey();
        byte[] publicA = Keygen.generatePublicKey(privateA);

        byte[] privateB = Keygen.generatePrivateKey();
        byte[] publicB = Keygen.generatePublicKey(privateB);

        KeyPair pairA = new KeyPair(publicA, privateA);
        KeyPair pairB = new KeyPair(publicB, privateB);

        byte[] sharedA = Keygen.generateSharedKey(pairA.getPrivateKey(), pairB.getPublicKey());
        byte[] sharedB = Keygen.generateSharedKey(pairB.getPrivateKey(), pairA.getPublicKey());

        Assert.assertArrayEquals(sharedA, sharedB);

        SecretKeySpec sharedKey1 = EncDec.deriveCipherKey(sharedA);
        SecretKeySpec sharedKey2 = EncDec.deriveCipherKey(sharedB);
        try {
            Cipher enc = Cipher.getInstance("AES/CBC/PKCS5Padding");
            Cipher dec = Cipher.getInstance("AES/CBC/PKCS5Padding");

            // Initializes the encryption cipher and encrypts the message bytes
            enc.init(Cipher.ENCRYPT_MODE, sharedKey1);
            byte[] encryptedMessageBytes = EncDec.encrypt(enc, messageBytes);
            String base64EncodedEncryptedMessage = Base64.getEncoder().encodeToString(encryptedMessageBytes);

            // ---- DECRYPTION ----
            byte[] decodedEncryptedMessageBytes = Base64.getDecoder().decode(base64EncodedEncryptedMessage);

            // Initializes the decryption cipher and decrypts the message bytes
            IvParameterSpec ivParamSpec = new IvParameterSpec(decodedEncryptedMessageBytes, 0, dec.getBlockSize());
            dec.init(Cipher.DECRYPT_MODE, sharedKey2, ivParamSpec);
            byte[] decryptedMessageBytes = EncDec.decrypt(dec, decodedEncryptedMessageBytes);

            String result = new String(decryptedMessageBytes);

            Assert.assertEquals(result, message);
        }
        catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException("Error retrieving the Cipher instance");
        }
        catch (NoSuchPaddingException ex) {
            throw new RuntimeException("Error retrieving the Cipher padding");
        }
        catch (InvalidAlgorithmParameterException ex) {
            throw new RuntimeException("Error initializing the Cipher instance, invalid cipher mode");
        }
        catch (InvalidKeyException ex) {
            throw new RuntimeException("Error initializing the Cipher instance, invalid key");
        }
        catch (Exception ex) {
            throw new RuntimeException("Unknown error has occurred");
        }
    }
}
